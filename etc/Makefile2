# https://www.gnu.org/software/make/manual/make.html

GIT_REMOTE_BRANCH := REFACTORING_2021_05_20_START
GIT_REMOTE := origin
DATA_DIR := data

all: clean setup
	@echo "all"

update: vcs_update download setup_pip_install
	@echo "update"

upgrade: update_dependencies
	@echo "upgrade"

update_dependencies: clean setup_pip_compile get_python_requirements_from_txt setup_pip_install
	@echo "update_dependencies"


# -----------------------------------------------------------------------------------------------------
#
#    venv
#
# -----------------------------------------------------------------------------------------------------

venv_setup:
	@echo "venv_setup"
	python3 -m venv venv

venv_clean:
	@echo "venv_clean"
	@echo "deactivate"
	rm -rf venv


# -----------------------------------------------------------------------------------------------------
#
#    clean
#
# -----------------------------------------------------------------------------------------------------

clean: clean_node_modules
	@echo "clean"
	rm -rf .eggs
	rm -rf flask_covid19.egg-info
	rm -rf __pycache__
	rm -rf build
	rm -rf dist
	rm -rf .checkmate
	$(MAKE) -C $(DATA_DIR) clean

clean_node_modules:
	@echo "clean_node_modules"
	rm -rf node_modules
	rm -rf src/covid19/node_modules
	rm -rf src/covid19/static/vendor


distclean: clean_pip_install
	@echo "distclean"
	$(MAKE) -C $(DATA_DIR) distclean

clean_pip_install:
	@echo "pip_install"
	python -m pip uninstall flask-covid19 -y
	pip uninstall -r requirements/dev.txt -y
	pip uninstall -r requirements/docs.txt -y
	pip uninstall -r requirements/tests.txt -y
	python -m pip uninstall wheel twine secretstorage requests-toolbelt readme-renderer keyring bleach protobuf -y

# -----------------------------------------------------------------------------------------------------
#
#    setup
#
# -----------------------------------------------------------------------------------------------------

setup: clean setup_development_pip setup_development_setuptools setup_development setup_frontend setup_pip_install
	@echo "setup"

setup_pip: clean_pip_install setup_development_pip setup_pip_install setup_pip_compile get_python_requirements_from_txt setup_development_setuptools
	@echo "setup_pip"

setup_pip_install:
	@echo "pip_install"
	pip install -r requirements/build.txt
	pip install -r requirements/docs.txt
	pip install -r requirements/tests.txt
	pip install -r requirements/dev.txt
	. scripts/script_get_python_requirements_from_txt.sh
	pip freeze > etc/requirements.txt
	pip check

setup_pip_compile:
	@echo "setup_pip_compile"
	pip-compile -r requirements/build.in
	pip-compile -r requirements/docs.in
	pip-compile -r requirements/tests.in
	pip-compile -r requirements/dev.in

setup_pip_check:
	@echo "setup_pip_check"
	python -m pip check

get_python_requirements_from_txt:
	@echo "get_python_requirements_from_txt"
	. scripts/script_get_python_requirements_from_txt.sh

setup_development_pip:
	@echo "setup_development_pip"
	python -m pip install --upgrade pip
	python -m pip uninstall flask_covid19 -y

setup_development_setuptools:
	@echo "setup_development_setuptools"
	python -m pip install setuptools wheel
	python -m pip uninstall flask_covid19 -y

setup_development: setup_development_setuptools
	@echo "setup_development"
	python setup.py develop

setup_frontend: build_frontend
	@echo "setup_frontend"
	npm -v
	npm install


# -----------------------------------------------------------------------------------------------------
#
#    build
#
# -----------------------------------------------------------------------------------------------------

dist: build

build: build_setup_py build_wheel_dist build_wheel build_frontend
	@echo "build"

build_frontend:
	@echo "build_frontend"

build_setup_py:
	@echo "build_setup_py"
	pip install -e .

build_wheel_dist:
	@echo "build_wheel_dist"
	python setup.py sdist bdist_wheel

build_wheel:
	@echo "build_wheel"
	python -m build --wheel


# -----------------------------------------------------------------------------------------------------
#
#   vcs
#
# -----------------------------------------------------------------------------------------------------

vcs_setup:
	git config pull.rebase false
	git submodule init
	git submodule update
	git config --global diff.submodule log
	git submodule update --remote --merge
	$(MAKE) -C $(DATA_DIR) vcs_setup

vcs_commit:
	git add .
	git commit -m "git_commit_and_push via make"
	$(MAKE) -C $(DATA_DIR) vcs_commit

vcs_update:
	git submodule update
	git pull $(REMOTE) $(REMOTE_BRANCH)
	$(MAKE) -C $(DATA_DIR) vcs_update

vcs_store_to_remote:
	git push $(REMOTE) $(REMOTE_BRANCH)
	$(MAKE) -C $(DATA_DIR) vcs_store_to_remote

vcs_push: vcs_setup vcs_commit vcs_store_to_remote vcs_load_from_remote
	$(MAKE) -C $(DATA_DIR) vcs_push

vcs_pull: vcs_setup vcs_checkout
	$(MAKE) -C $(DATA_DIR) vcs_pull

vcs: vcs_push
	$(MAKE) -C $(DATA_DIR) vcs


# -----------------------------------------------------------------------------------------------------
#
#   data
#
# -----------------------------------------------------------------------------------------------------

download:
	$(MAKE) -C $(DATA_DIR) download

db: db_dump db_reimport

db_dump:
	$(MAKE) -C $(DATA_DIR) db_dump

db_reimport:
	$(MAKE) -C $(DATA_DIR) db_reimport


# -----------------------------------------------------------------------------------------------------
#
#   stay human
#
# -----------------------------------------------------------------------------------------------------

love:
	@echo "not war!"
