@startuml
left to right direction


package flask_covid19.data_all.model_import {

	interface AllImportFull {
		{classifier} download_file()
		{classifier} import_file()
		{classifier} full_update_dimension_tables()
		{classifier} full_update_fact_table()
		{classifier} full_update_star_schema()
	}

	interface AllImportIncrement {
		{classifier} download_file()
		{classifier} import_file()
		{classifier} update_dimension_tables()
		{classifier} update_fact_table()
		{classifier} update_star_schema()
	}

	interface AllImport {
	    datum_reported: Date
		location: String
		location_group: String
		{classifier} download_file()
		{classifier} import_file()
		{classifier} full_update_dimension_tables()
		{classifier} full_update_fact_table()
		{classifier} full_update_star_schema()
		{classifier} update_dimension_tables()
		{classifier} update_fact_table()
		{classifier} update_star_schema()
	}

	interface AllFlat {
	    id: Integer
	    datum_reported: Date
	    year: Integer
	    month: Integer
	    day_of_month: Integer
		day_of_year: Integer
	    day_of_week: Integer
	    week_of_year: Integer
	    year_week:  String
	    day_of_week_str: String
		month_str: String
		location: String
		location_group: String
		{classifier} import_file_flat()
		{classifier} get_years(): Integer[]
		{classifier} get_days(): Date[]
		{classifier} get_days_for_year(year: Integer): Date[]
		{classifier} get_location_groups(): String[]
		{classifier} get_locations_for_location_group(location_group: String): String[]
		{classifier} get_data_for_location(location: String): AllFlat[]
		{classifier} get_data_for_day(datum_reported: Date): AllFlat[]
	}
}

package flask_covid19.blueprints.who.model_import {

	entity WhoImport {
	    id: Integer
	    date_reported: String
	    country_code: String
	    country: String
	    who_region: String
	    new_cases: String
	    cumulative_cases: String
	    new_deaths: String
	    cumulative_deaths: String
		{classifier} download_file()
		{classifier} import_file()
		{classifier} full_update_dimension_tables()
		{classifier} full_update_fact_table()
		{classifier} full_update_star_schema()
		{classifier} update_dimension_tables()
		{classifier} update_fact_table()
		{classifier} update_star_schema()
	}

	entity WhoFlat {
	    id: Integer
	    datum_reported: Date
	    year: Integer
	    month: Integer
	    day_of_month: Integer
		day_of_year: Integer
	    day_of_week: Integer
	    week_of_year: Integer
	    year_week:  String
	    day_of_week_str: String
		month_str: String
		location: String
		location_group: String
	    date_reported: String
	    country_code: String
	    country: String
	    who_region: String
	    new_cases: String
	    cumulative_cases: String
	    new_deaths: String
	    cumulative_deaths: String
		{classifier} import_file_flat()
		{classifier} get_years(): Integer[]
		{classifier} get_days(): Date[]
		{classifier} get_days_for_year(year: Integer): Date[]
		{classifier} get_location_groups(): String[]
		{classifier} get_locations_for_location_group(location_group: String): String[]
		{classifier} get_data_for_location(location: String): WhoFlat[]
		{classifier} get_data_for_day(datum_reported: Date): WhoFlat[]
	}

}
AllImportFull <|-- AllImport
AllImportIncrement <|-- AllImport
AllImport <|-- AllFlat

AllImport <|-- WhoImport
AllFlat <|-- WhoFlat

WhoImport <|-- WhoFlat



package flask_covid19.data_all.model {

	interface AllDateReported {
	    id: Integer
		date_reported:  String
	    year_week:  String
	    datum: Date
	    year: Integer
	    month: Integer
	    day_of_month: Integer
	    day_of_week: Integer
	    week_of_year: Integer
		get_name_for_weekday()
		{classifier} get_names_for_weekday()
		{classifier} get_datum_parts(my_date_rep: String)
		{classifier} get_datum(my_year: Integer, my_month: Integer, my_day: Integer)
		{classifier} get_datum_as_str(my_year: Integer, my_month: Integer, my_day: Integer)
		{classifier} my_year_week(my_iso_year: Integer, week_number: Integer)
		{classifier} create_new_object_factory(my_date_rep: String)
	}

	interface AllLocationGroup {
	    id: Integer
	    continent:  String
	    {classifier} remove_all()
	    {classifier} get_all_as_page(page: Integer)
	    {classifier} get_all()
	    {classifier} get_all_as_dict()
	    {classifier} get_by_id(other_id: Integer)
	    {classifier} find_by_id(other_id: Integer)
	}

	interface AllLocation {
	    id: Integer
    }

	interface AllData {
	    id: Integer
	}

}

package flask_covid19.blueprints.who.model {

	entity WhoDateReported {
	    id: Integer
		date_reported: String
	    year_week: String
	    datum: Date
	    year: Integer
	    month: Integer
	    day_of_month: Integer
	    day_of_week: Integer
	    week_of_year: Integer
	    {classifier} create_new_object_factory(my_date_rep)
	}

	entity WhoCountryRegion {
	    id: Integer
	    region: String
	}

	entity WhoCountry {
	    id: Integer
		country_code: String
	    country: String
	    {classifier} remove_all()
	    {classifier} get_all_as_page(page: Integer)
	    {classifier} get_all()
	    {classifier} get_all_as_dict()
	    {classifier} get_by_id(other_id: Integer)
	    {classifier} get_germany()
	    {classifier} find_by_country_code_and_country_and_who_region_id(i_country_code, i_country, my_region)
	    {classifier} find_by_country_code(i_country_code)
	    {classifier} find_by_country(i_country)
	    {classifier} get_by_country_code(i_country_code)
	    {classifier} get_by_country(i_country)
	    {classifier} get_who_countries_for_region(region, page)
	}

	entity WhoData {
	    id: Integer
		cases_new: Integer
	    cases_cumulative: Integer
	    deaths_new: Integer
	    deaths_cumulative: Integer
	    {classifier} remove_all()
	    {classifier} get_all_as_page(page: Integer)
	    {classifier} get_all()
	    {classifier} get_by_id(other_id: Integer)
	    {classifier} find_one_or_none_by_date_and_country(my_date_reported, my_country)
	    {classifier} get_data_for_country(who_country, page)
	    {classifier} get_data_for_day(date_reported, page)
	    {classifier} get_data_for_day_order_by_cases_new(date_reported, page)
	    {classifier} get_data_for_day_order_by_cases_cumulative(date_reported, page)
	    {classifier} get_data_for_day_order_by_deaths_new(date_reported, page)
	    {classifier} get_data_for_day_order_by_deaths_cumulative(date_reported, page)
	    {classifier} get_data_for_country_order_by_cases_new(who_country, page)
	    {classifier} get_data_for_country_order_by_cases_cumulative(who_country, page)
	    {classifier} get_data_for_country_order_by_deaths_new(who_country, page)
	    {classifier} get_data_for_country_order_by_deaths_cumulative(who_country, page)
	}
}

AllDateReported <|-- WhoDateReported
AllLocationGroup <|-- WhoCountryRegion
AllLocation <|-- WhoCountry
AllData <|-- WhoData

WhoCountry "1" *--> "*" WhoCountryRegion : region
WhoData "1" *--> "*" WhoCountry : country
WhoData "1" *--> "*" WhoDateReported : date_reported

@enduml
