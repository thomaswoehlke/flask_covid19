from data_owid.owid_model_import import OwidImport


class OwidImportFactory:

    @classmethod
    def create_new(cls, date_reported, d, row):
        o = OwidImport(
            date_reported_import_str=date_reported,
            iso_code=row['iso_code'],
            date=date_reported,
            continent=row['continent'],
            location=row['location'],
            total_cases=row['total_cases'],
            new_cases=row['new_cases'],
            new_cases_smoothed=row['new_cases_smoothed'],
            total_deaths=row['total_deaths'],
            new_deaths=row['new_deaths'],
            new_deaths_smoothed=row['new_deaths_smoothed'],
            total_cases_per_million=row['total_cases_per_million'],
            new_cases_per_million=row['new_cases_per_million'],
            new_cases_smoothed_per_million=row['new_cases_smoothed_per_million'],
            total_deaths_per_million=row['total_deaths_per_million'],
            new_deaths_per_million=row['new_deaths_per_million'],
            new_deaths_smoothed_per_million=row['new_deaths_smoothed_per_million'],
            reproduction_rate=row['reproduction_rate'],
            icu_patients=row['icu_patients'],
            icu_patients_per_million=row['icu_patients_per_million'],
            hosp_patients=row['hosp_patients'],
            hosp_patients_per_million=row['hosp_patients_per_million'],
            weekly_icu_admissions=row['weekly_icu_admissions'],
            weekly_icu_admissions_per_million=row['weekly_icu_admissions_per_million'],
            weekly_hosp_admissions=row['weekly_hosp_admissions'],
            weekly_hosp_admissions_per_million=row['weekly_hosp_admissions_per_million'],
            new_tests=row['new_tests'],
            total_tests=row['total_tests'],
            total_tests_per_thousand=row['total_tests_per_thousand'],
            new_tests_per_thousand=row['new_tests_per_thousand'],
            new_tests_smoothed=row['new_tests_smoothed'],
            new_tests_smoothed_per_thousand=row['new_tests_smoothed_per_thousand'],
            positive_rate=row['positive_rate'],
            tests_per_case=row['tests_per_case'],
            tests_units=row['tests_units'],
            total_vaccinations=row['total_vaccinations'],
            people_vaccinated=row['people_vaccinated'],
            people_fully_vaccinated=row['people_fully_vaccinated'],
            new_vaccinations=row['new_vaccinations'],
            new_vaccinations_smoothed=row['new_vaccinations_smoothed'],
            total_vaccinations_per_hundred=row['total_vaccinations_per_hundred'],
            people_vaccinated_per_hundred=row['people_vaccinated_per_hundred'],
            people_fully_vaccinated_per_hundred=row['people_fully_vaccinated_per_hundred'],
            new_vaccinations_smoothed_per_million=row['new_vaccinations_smoothed_per_million'],
            stringency_index=row['stringency_index'],
            population=row['population'],
            population_density=row['population_density'],
            median_age=row['median_age'],
            aged_65_older=row['aged_65_older'],
            aged_70_older=row['aged_70_older'],
            gdp_per_capita=row['gdp_per_capita'],
            extreme_poverty=row['extreme_poverty'],
            cardiovasc_death_rate=row['cardiovasc_death_rate'],
            diabetes_prevalence=row['diabetes_prevalence'],
            female_smokers=row['female_smokers'],
            male_smokers=row['male_smokers'],
            handwashing_facilities=row['handwashing_facilities'],
            hospital_beds_per_thousand=row['hospital_beds_per_thousand'],
            life_expectancy=row['life_expectancy'],
            human_development_index=row['human_development_index'],
            datum=d.datum,
            processed_update=False,
            processed_full_update=False,
        )
        return o
